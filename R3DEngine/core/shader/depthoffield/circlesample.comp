#version 460
uniform float uBokehRadius;
uniform int uDstWidth;
uniform int uDstHeight;
layout (binding = 0) uniform sampler2D srcTex;
layout (binding = 1, rgba32f) uniform image2D dstImage;

layout(local_size_x = 16, local_size_y = 16) in;
/*in uvec3 gl_NumWorkGroups;
in uvec3 gl_WorkGroupID;
in uvec3 gl_LocalInvocationID;
in uvec3 gl_GlobalInvocationID;
in uint gl_LocalInvocationIndex;

gl_NumWorkGroups：此变量包含传递给调度功能的工作组数。
gl_WorkGroupID：这是此着色器调用的当前工作组。每个XYZ组件将处于半开范围[0，gl_NumWorkGroups.XYZ）
gl_LocalInvocationID：这是着色器的当前调用中的工作组。每个XYZ组件将处于半开范围[0，gl_WorkGroupSize.XYZ）
gl_GlobalInvocationID：此值在此计算调度调用的所有调用中唯一标识该计算着色器的特定调用
它跟前者有着等式关系：gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID;
gl_LocalInvocationIndex：这是gl_LocalInvocationID的一维版本。它在工作组中标识此调用的索引
它跟前者有着等式关系： gl_LocalInvocationIndex =
gl_LocalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y +
gl_LocalInvocationID.y * gl_WorkGroupSize.x +
gl_LocalInvocationID.x;*/
/*
//gl_GlobalInvocationID.xy 全局工作组的位置gl_WorkGroupID*gl_WorkGroupSize+gl_LocalInvocationID
//gl_LocalInvocationID.xy 本地工作组的序号(0,0,0)到(3,3,1);
//gl_WorkGroupID 当前工作组在全局工作组中的位置（0,0,0）到（299,224,0）
//gl_WorkGroupSize.xyz 工作组大小(4,4,1)
//gl_NumWorkGroups 工作组个数向量vec3(300,225,1);
*/
const int kernelSampleCount = 22;
const float invKernelSampleCount = 0.04545455;
const vec2 kernel[kernelSampleCount] = {
vec2(0, 0),
vec2(0.5333336, 0),
vec2(0.3325279, 0.4169768),
vec2(-0.11867785, 0.5199616),
vec2(-0.48051673, 0.2314047),
vec2(-0.48051673, -0.23140468),
vec2(-0.11867785, -0.51996166),
vec2(0.33252785, -0.4169769),
vec2(1, 0),
vec2(0.90096885, 0.43388376),
vec2(0.6234898, 0.7818315),
vec2(0.22252098, 0.9748279),
vec2(-0.2225209, 0.9749279),
vec2(-0.62349, 0.7818314),
vec2(-0.90096885, 0.43388382),
vec2(-1, 0),
vec2(-0.90096885, -0.43388376),
vec2(-0.6234896, -0.7818316),
vec2(-0.22252055, -0.974928),
vec2(0.22251215, -0.9749278),
vec2(0.6234879, -0.7818316),
vec2(0.90096885, -0.43388376)
};

vec3 Sample(vec2 uv){
    return texture(srcTex, uv).rgb;
}
float Weigh(float coc, float radius){
    //用于平滑过渡采样圈影响
    return clamp((coc-radius+2.0f)/2.0f, 0.0f, 1.0f);
}
vec3 SampleBox(vec2 uv, vec2 texelSize){
    vec3 color = vec3(0);
    float weight = 0.0f;
    for (int i=0;i<kernelSampleCount;++i){
        vec2 o = kernel[i]*uBokehRadius;
        float radius = length(o);
        o*=texelSize;
        vec4 s = texture(srcTex, uv+o);
        //float sw = Weigh(abs(s.a), radius);
        float sw = Weigh(max(0, s.a), radius);//背景点采样时限制采样到的前景点的贡献
        color+=s.rgb*sw;
        weight+=sw;
    }
    if (weight==0){
        return color/(weight+1.0f);
    } else {
        return color/(weight);
    }

}
void main()
{
    vec2 texUV = (vec2(gl_GlobalInvocationID.xy)+vec2(0.5))/vec2(uDstWidth, uDstHeight);
    vec2 texelSize = 1.0 / textureSize(srcTex, 0);
    vec3 col = SampleBox(texUV, texelSize);
    imageStore(dstImage, ivec2(gl_GlobalInvocationID.xy), vec4(col, 1.0f));
}
