#version 460
#define DIRECTION_LIGHT_COUNT 4
#define POINT_LIGHT_COUNT 1024
#define TILE_SIZE 16
#define TILE_LIGHT_MAX 256
struct DirLight {
    vec3 direction;
    float fill0;
    vec3 strength;
    float fill1;
};
struct UniformBlockBase {
    mat4 view;
    mat4 proj;
    mat4 invproj;
    mat4 viewproj;
    mat4 invviewproj;
    vec3 camerapos;
    int dirlightactivenum;//平行光启用数目
    DirLight dirLights[DIRECTION_LIGHT_COUNT];
    int pointlightactivenum;//点光源启用数目
    int tilepointlightmax;//单个块最多点光源数目
    float windowwidth;
    float windowheight;
    int workgroup_x;//用于灯光剔除的横向组数
    float znear;
    float zfar;
    int csmlayercount;
    mat4 lightviewprojdata[6];
    float depthbias;
    float normalbias;
    float fill0;
    float fill1;
    vec3 ambient;
    float fill2;
};
struct PointLight{
    vec3 position;
    float constant;
    vec3 strength;
    float linear;
    float quadratic;
    float radius;
    float fill1;
    float fill2;
};
layout(std140, binding = 0) uniform UniformBaseBuffer {
    UniformBlockBase ubobasedata;
};

layout (std430, binding = 0) buffer light_data {
    PointLight pointlights[POINT_LIGHT_COUNT];
};
layout (std430, binding = 1) writeonly buffer visible_lights_indices {
    uint lights_indices[];
};
layout (std430, binding = 2) writeonly buffer visible_lights_count {
    uint lights_count[];
};
layout (std430, binding = 3) readonly buffer tile_clip_plane {
    vec4 clip_plane[];
};
layout (binding = 0) uniform sampler2D depthTex;

shared uint min_depth;
shared uint max_depth;
shared uint min_depth_view;
shared vec4 frustum_planes[6];
shared uint group_light_count;
shared uint group_light_index[TILE_LIGHT_MAX];//用于临时存储tile中的光源

layout(local_size_x = 16, local_size_y = 16) in;
/*in uvec3 gl_NumWorkGroups;
in uvec3 gl_WorkGroupID;
in uvec3 gl_LocalInvocationID;
in uvec3 gl_GlobalInvocationID;
in uint gl_LocalInvocationIndex;

gl_NumWorkGroups：此变量包含传递给调度功能的工作组数。
gl_WorkGroupID：这是此着色器调用的当前工作组。每个XYZ组件将处于半开范围[0，gl_NumWorkGroups.XYZ）
gl_LocalInvocationID：这是着色器的当前调用中的工作组。每个XYZ组件将处于半开范围[0，gl_WorkGroupSize.XYZ）
gl_GlobalInvocationID：此值在此计算调度调用的所有调用中唯一标识该计算着色器的特定调用
它跟前者有着等式关系：gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID;
gl_LocalInvocationIndex：这是gl_LocalInvocationID的一维版本。它在工作组中标识此调用的索引
它跟前者有着等式关系： gl_LocalInvocationIndex =
gl_LocalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y +
gl_LocalInvocationID.y * gl_WorkGroupSize.x +
gl_LocalInvocationID.x;*/
/*
//gl_GlobalInvocationID.xy 全局工作组的位置gl_WorkGroupID*gl_WorkGroupSize+gl_LocalInvocationID
//gl_LocalInvocationID.xy 本地工作组的序号(0,0,0)到(3,3,1);
//gl_WorkGroupID 当前工作组在全局工作组中的位置（0,0,0）到（299,224,0）
//gl_WorkGroupSize.xyz 工作组大小(4,4,1)
//gl_NumWorkGroups 工作组个数向量vec3(300,225,1);
*/

vec3 screen_to_view_at_zfar(in uvec2 GroupID){
    float windowwidth = ubobasedata.windowwidth;
    float windowheight = ubobasedata.windowheight;
    vec3 viewatzfar;
    vec2 screenpixel = vec2(GroupID.x*TILE_SIZE, GroupID.y*TILE_SIZE);
    vec3 clip = vec3((screenpixel/vec2(windowwidth, windowheight))*2.0f-vec2(1.0f), 1.0f)*ubobasedata.zfar;
    vec4 view = ubobasedata.invproj*(vec4(clip, clip.z));
    viewatzfar = view.xyz;
    return viewatzfar;
}
//深度转换到视空间z
float depthToViewZ(float in_depth, float in_znear, float in_zfar){
    float NDCZ = in_depth*2.0f-1.0f;
    float VZ = 2.0f*in_zfar*in_znear/((in_zfar+in_znear)-NDCZ*(in_zfar-in_znear));
    return -VZ;
}
void main() {
    //获取tile索引
    ivec2 tile_id = ivec2(gl_WorkGroupID.xy);
    //初始化所需数据
    if (gl_LocalInvocationIndex == 0) {
        min_depth = 0x7F7FFFFF;
        max_depth = 0x0;
        group_light_count = 0;
        vec2 screen_uv = vec2(float(gl_GlobalInvocationID.x)/float(ubobasedata.windowwidth), float(gl_GlobalInvocationID.y)/float(ubobasedata.windowheight));
        float depth = texture(depthTex, screen_uv).r;
        float depthview = depthToViewZ(depth, ubobasedata.znear, ubobasedata.zfar);
        min_depth_view = uint(-depthview);
        min_depth_view = uint(ubobasedata.windowwidth);
    }
    barrier();

    //计算工作组对应的tile最大和最小深度
    vec2 screen_uv = vec2(float(gl_GlobalInvocationID.x)/float(ubobasedata.windowwidth), float(gl_GlobalInvocationID.y)/float(ubobasedata.windowheight));
    float depth = texture(depthTex, screen_uv).r;
    //将float转化为uint，以便使用原子操作
    uint depth_uint = floatBitsToUint(depth);
    atomicMin(min_depth, depth_uint);
    atomicMax(max_depth, depth_uint);
    barrier();

    //计算视景体
    if (gl_LocalInvocationIndex == 0) {
        //转化最大最小深度为float
        float min_group_depth = uintBitsToFloat(min_depth);
        float max_group_depth = uintBitsToFloat(max_depth);
        //计算相机空间下的最大最小深度
        //使用投影矩阵的逆矩阵
        /*        vec4 vs_min_depth = (ubobasedata.invproj * vec4(0.0, 0.0, (2.0 * min_group_depth - 1.0), 1.0));
                vec4 vs_max_depth = (ubobasedata.invproj * vec4(0.0, 0.0, (2.0 * max_group_depth - 1.0), 1.0));
                vs_min_depth /= vs_min_depth.w;
                vs_max_depth /= vs_max_depth.w;
                min_group_depth = vs_min_depth.z;
                max_group_depth = vs_max_depth.z;*/
        //使用公式推导，需要传入znear，zfar
        min_group_depth = depthToViewZ(min_group_depth, ubobasedata.znear, ubobasedata.zfar);
        max_group_depth = depthToViewZ(max_group_depth, ubobasedata.znear, ubobasedata.zfar);

        /*
        //使用实时计算获得裁剪面
                vec3 minTileViewAtZfar = screen_to_view_at_zfar(uvec2(gl_WorkGroupID.x, gl_WorkGroupID.y));
                vec3 maxTileViewAtZfar = screen_to_view_at_zfar(uvec2(gl_WorkGroupID.x+1, gl_WorkGroupID.y+1));
                frustum_planes[0] = vec4(normalize(vec3(0.0, -ubobasedata.zfar, -maxTileViewAtZfar.y)), 0.0f);//上
                frustum_planes[1] = vec4(normalize(vec3(0.0, ubobasedata.zfar, minTileViewAtZfar.y)), 0.0f);//下
                frustum_planes[2] = vec4(normalize(vec3(-ubobasedata.zfar, 0.0, -maxTileViewAtZfar.x)), 0.0f);//右
                frustum_planes[3] = vec4(normalize(vec3(ubobasedata.zfar, 0.0, minTileViewAtZfar.x)), 0.0f);//左
                frustum_planes[4] = vec4(0.0, 0.0, 1.0, -max_group_depth);
                frustum_planes[5] = vec4(0.0, 0.0, -1.0, min_group_depth);*/
        //从预计算的buffer中获取裁剪面，窗口调整时需要重建buffer
        uint baseplaneindex = 4*(gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x);
        frustum_planes[0] = clip_plane[baseplaneindex+0];//上
        frustum_planes[1] = clip_plane[baseplaneindex+1];//下
        frustum_planes[2] = clip_plane[baseplaneindex+2];//左
        frustum_planes[3] = clip_plane[baseplaneindex+3];//右
        frustum_planes[4] = vec4(0.0, 0.0, 1.0, -max_group_depth);
//        frustum_planes[5] = vec4(0.0, 0.0, -1.0, min_group_depth);
        frustum_planes[5] = vec4(0.0, 0.0, -1.0, -ubobasedata.znear);//省去透明物体的灯光排序
    }

    barrier();

    //剔除光源
    uint thread_count = TILE_SIZE * TILE_SIZE;
    for (uint i = gl_LocalInvocationIndex; i < ubobasedata.pointlightactivenum; i += thread_count) {
        PointLight light = pointlights[i];
        vec4 vs_light_pos = ubobasedata.view * vec4(light.position, 1.0);
        if (group_light_count < TILE_LIGHT_MAX) {
            bool inFrustum = true;
            for (uint j = 0; j < 6 && inFrustum; j++) {
                float d = dot(vec3(frustum_planes[j]), vec3(vs_light_pos))+frustum_planes[j].w;
                inFrustum = (d >= -light.radius);
            }
            if (inFrustum) {
                uint id = atomicAdd(group_light_count, 1);
                if (id<TILE_LIGHT_MAX){
                    group_light_index[id] = i;
                }
            }
        }
    }
    barrier();
    //将tile光源数据写入
    if (gl_LocalInvocationIndex == 0) {
        uint index = gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;
        if (group_light_count<TILE_LIGHT_MAX){
            lights_count[index] = group_light_count;
            uint offset = index * TILE_LIGHT_MAX;
            for (uint i = 0; i < group_light_count; i++) {
                lights_indices[offset + i] = group_light_index[i];
            }
        } else {
            lights_count[index] = TILE_LIGHT_MAX;
            uint offset = index * TILE_LIGHT_MAX;
            for (uint i = 0; i < TILE_LIGHT_MAX; i++) {
                lights_indices[offset + i] = group_light_index[i];
            }
        }
    }
}
