#version 460
uniform ivec4 uSrcDstImageSize;
layout (binding = 0) uniform sampler2D srcTex;
layout (binding = 1, r32f) uniform writeonly image2D dstImage;

layout(local_size_x = 16, local_size_y = 16) in;
/*in uvec3 gl_NumWorkGroups;
in uvec3 gl_WorkGroupID;
in uvec3 gl_LocalInvocationID;
in uvec3 gl_GlobalInvocationID;
in uint gl_LocalInvocationIndex;

gl_NumWorkGroups：此变量包含传递给调度功能的工作组数。
gl_WorkGroupID：这是此着色器调用的当前工作组。每个XYZ组件将处于半开范围[0，gl_NumWorkGroups.XYZ）
gl_LocalInvocationID：这是着色器的当前调用中的工作组。每个XYZ组件将处于半开范围[0，gl_WorkGroupSize.XYZ）
gl_GlobalInvocationID：此值在此计算调度调用的所有调用中唯一标识该计算着色器的特定调用
它跟前者有着等式关系：gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID;
gl_LocalInvocationIndex：这是gl_LocalInvocationID的一维版本。它在工作组中标识此调用的索引
它跟前者有着等式关系： gl_LocalInvocationIndex =
gl_LocalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y +
gl_LocalInvocationID.y * gl_WorkGroupSize.x +
gl_LocalInvocationID.x;*/
/*
//gl_GlobalInvocationID.xy 全局工作组的位置gl_WorkGroupID*gl_WorkGroupSize+gl_LocalInvocationID
//gl_LocalInvocationID.xy 本地工作组的序号(0,0,0)到(3,3,1);
//gl_WorkGroupID 当前工作组在全局工作组中的位置（0,0,0）到（299,224,0）
//gl_WorkGroupSize.xyz 工作组大小(4,4,1)
//gl_NumWorkGroups 工作组个数向量vec3(300,225,1);
*/
float Sample(ivec2 pixellocal){
    vec2 pixeluv = vec2((float(pixellocal.x)+0.5f)/float(uSrcDstImageSize.x),(float(pixellocal.y)+0.5f)/float(uSrcDstImageSize.y));
    return texture(srcTex, pixeluv).r;
}
float SampleBox(ivec2 pixellocal){
    ivec2 pixelsrc = ivec2(pixellocal*2);
    float col00 = Sample(pixelsrc+ivec2(0, 0));
    float col01 = Sample(pixelsrc+ivec2(0, 1));
    float col10 = Sample(pixelsrc+ivec2(1, 0));
    float col11 = Sample(pixelsrc+ivec2(1, 1));
    float s1 = min(col00, col01);
    float s2 = min(col10, col11);
    float s = min(s1, s2);
    return s;
}
void main()
{
    float col = SampleBox(ivec2(gl_GlobalInvocationID.xy));
    imageStore(dstImage, ivec2(gl_GlobalInvocationID.xy), vec4(col));
}
