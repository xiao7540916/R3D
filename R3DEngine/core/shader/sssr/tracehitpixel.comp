#version 460
#extension GL_ARB_bindless_texture : require
#extension GL_ARB_shader_clock : enable
uniform ivec4 uSrcDstImageSize;
#define DIRECTION_LIGHT_COUNT 4
struct DirLight {
    vec3 direction;
    float fill0;
    vec3 strength;
    float fill1;
};
struct UniformBlockBase {
    mat4 view;
    mat4 proj;
    mat4 invproj;
    mat4 viewproj;
    mat4 invviewproj;
    vec3 camerapos;
    int dirlightactivenum;//平行光启用数目
    DirLight dirLights[DIRECTION_LIGHT_COUNT];
    int pointlightactivenum;//点光源启用数目
    int tilepointlightmax;//单个块最多点光源数目
    float windowwidth;
    float windowheight;
    int workgroup_x;//用于灯光剔除的横向组数
    float znear;
    float zfar;
    int csmlayercount;
    mat4 lightviewprojdata[6];
    float depthbias;
    float normalbias;
    float fill0;
    float fill1;
    vec3 ambient;
    float fill2;
    ivec4 depthimagesize[9];
};
layout(std140, binding = 0) uniform UniformBaseBuffer {
    UniformBlockBase ubobasedata;
};
layout (binding = 0) uniform sampler2D normalTex;//normal,roughness rgba32f
layout (binding = 1) uniform sampler2D albedoTex;//albedo,metal rgba32f
layout (binding = 2, rgba32i) uniform writeonly iimage2D hitPixelImage;
layout (binding = 3, rgba32f) uniform writeonly image2D debugImage;
layout (binding = 14)uniform DEPTH_TEX{
    sampler2D depthTex[9];
};

layout(local_size_x = 16, local_size_y = 16) in;
/*in uvec3 gl_NumWorkGroups;
in uvec3 gl_WorkGroupID;
in uvec3 gl_LocalInvocationID;
in uvec3 gl_GlobalInvocationID;
in uint gl_LocalInvocationIndex;

gl_NumWorkGroups：此变量包含传递给调度功能的工作组数。
gl_WorkGroupID：这是此着色器调用的当前工作组。每个XYZ组件将处于半开范围[0，gl_NumWorkGroups.XYZ）
gl_LocalInvocationID：这是着色器的当前调用中的工作组。每个XYZ组件将处于半开范围[0，gl_WorkGroupSize.XYZ）
gl_GlobalInvocationID：此值在此计算调度调用的所有调用中唯一标识该计算着色器的特定调用
它跟前者有着等式关系：gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID;
gl_LocalInvocationIndex：这是gl_LocalInvocationID的一维版本。它在工作组中标识此调用的索引
它跟前者有着等式关系： gl_LocalInvocationIndex =
gl_LocalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y +
gl_LocalInvocationID.y * gl_WorkGroupSize.x +
gl_LocalInvocationID.x;*/
/*
//gl_GlobalInvocationID.xy 全局工作组的位置gl_WorkGroupID*gl_WorkGroupSize+gl_LocalInvocationID
//gl_LocalInvocationID.xy 本地工作组的序号(0,0,0)到(3,3,1);
//gl_WorkGroupID 当前工作组在全局工作组中的位置（0,0,0）到（299,224,0）
//gl_WorkGroupSize.xyz 工作组大小(4,4,1)
//gl_NumWorkGroups 工作组个数向量vec3(300,225,1);
*/
const float PI = 3.14159265358979323846;
const float PI2 = 6.283185307179586;
const float INVPI = 0.3183099;
const float MAX_THICKNESS = 0.0017;
//求平方。sqrt为开方
float sqr(float x) { return x*x; }
// 从两个无符号整数值生成一个随机无符号整数 , using 16 pairs
uint tea(uint val0, uint val1)
{
    uint v0 = val0;
    uint v1 = val1;
    uint s0 = 0;
    for (uint n = 0; n < 16; n++)
    {
        s0 += 0x9e3779b9;
        v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4);
        v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761e);
    }
    return v0;
}
// 由之前的无符号整数，在 [0, 2^24) 中生成一个随机的 unsigned int
// 使用 Numerical Recipes 线性同余生成器
uint lcg(inout uint prev)
{
    uint LCG_A = 1664525u;
    uint LCG_C = 1013904223u;
    prev       = (LCG_A * prev + LCG_C);
    return prev & 0x00FFFFFF;
}
//由之前的随机状态生成0到1的随机数
float rnd(inout uint prev)
{
    return (float(lcg(prev)) / float(0x01000000));
}
vec3 depthToWorldPos(vec2 in_uv, float in_depth){
    vec3 worldpos;
    float ndcz = in_depth*2.0f-1.0f;
    vec2 ndcxy = in_uv*2.0f-vec2(1.0f);
    vec4 ndc = vec4(ndcxy, ndcz, 1.0f);
    vec4 D = ubobasedata.invviewproj*ndc;
    D/=D.w;
    worldpos = D.xyz;
    return worldpos;
}
//深度转换到视空间z
float depthToViewZ(float in_depth, float in_znear, float in_zfar){
    float NDCZ = in_depth*2.0f-1.0f;
    float VZ = 2.0f*in_zfar*in_znear/((in_zfar+in_znear)-NDCZ*(in_zfar-in_znear));
    return -VZ;
}
vec3 tantoworld(vec3 dir, vec3 normal){
    vec3 w = normal;
    vec3 u = cross(vec3(0.00424, 1, 0.00764), w);
    u = normalize(u);
    vec3 v = cross(u, w);
    vec3 wi = dir.x * u + dir.y * v + dir.z * w;//入射方向
    if (dot(normal, wi) < 0.0) {
        wi = -dir.x * u - dir.y * v + dir.z * w;
    }//反射光线在反射面下方，则镜像其方向以修复大入射角下导致的反射采样点返回纯黑色而带来的表面亮度不足问题
    wi = normalize(wi);
    return wi;
}
float GTR2(float NdotH, float a)
{
    float a2 = a*a;
    float t = 1 + (a2-1)*NdotH*NdotH;
    return a2 / (PI * t*t);
}
// GTR2 重要性采样。uv为两个0-1的随机数组成的二维向量。V为视角方向，N为法线方向，alpha为粗糙度的平方
vec3 sampleGTR2(vec2 uv, float a) {
    float a2 = a*a;
    float phi_h = 2.0 * PI * uv.x;
    float sin_phi_h = sin(phi_h);
    float cos_phi_h = cos(phi_h);

    float cos_theta_h = sqrt((1.0-uv.y)/(1.0+(a2-1.0)*uv.y));
    float sin_theta_h = sqrt(max(0, 1.0 - cos_theta_h * cos_theta_h));

    // 采样 "微平面" 的法向量作为镜面反射的半角向量 h
    vec3 H = vec3(sin_theta_h*cos_phi_h, sin_theta_h*sin_phi_h, cos_theta_h);

    return H;
}
void sampleGTRBRDF2(vec3 uv, vec3 V, vec3 N, float roughness, inout vec3 wi, inout float pdf){
    float agtr = max(0.0001, sqr(roughness));
    vec3 Hspec = sampleGTR2(uv.xy, agtr);
    Hspec = tantoworld(Hspec.xyz, N);

    vec3 rspec = reflect(-V, Hspec);
    wi = normalize(rspec);
    vec3 H = normalize(wi+V);
    float NdotH = dot(N, H);
    float LdotH = dot(wi, H);
    float Dspec = GTR2(NdotH, agtr);
    pdf = Dspec*NdotH/(4.0*LdotH);
}
//相机空间转换到uv坐标
vec3 getScreenCoord(vec3  in_point){
    vec4 positionInScreen = ubobasedata.proj*vec4(in_point, 1.0);
    positionInScreen.xyzw /= positionInScreen.w;
    positionInScreen.xyz = positionInScreen.xyz*0.5+0.5;
    return positionInScreen.xyz;
}
//获取level深度图尺寸
vec2 getCellCount(int in_level){
    return vec2(ubobasedata.depthimagesize[in_level].xy);
}
//获取当前单元位置(横向，纵向第几格)
vec2 getCell(vec2 pos, vec2 CellCount){
    return vec2(floor(pos*CellCount));
}
vec3 intersectDepthPlane(vec3 o, vec3 d, float t){
    return o + d * t;
}
vec3 intersectCellBoundary(vec3 o, vec3  d, vec2 rayCell, vec2 cell_count, vec2 crossStep, vec2 crossOffset){
    vec2 nextPos = rayCell + crossStep;
    nextPos = nextPos/cell_count;
    nextPos = nextPos+crossOffset;
    vec2 dis  = nextPos - o.xy;
    vec2 delta = dis/d.xy;
    float t = min(delta.x, delta.y);
    return intersectDepthPlane(o, d, t);
}
float getMinimumDepthPlane(vec2 pos, int level){
    return texture(depthTex[level], pos).r;
}
bool crossedCellBoundary(vec2 oldCellIdx, vec2 newCellIdx){
    return (oldCellIdx.x!=newCellIdx.x)||(oldCellIdx.y!=newCellIdx.y);
}
ivec2 traceHitPixel(vec3 in_uvstart, vec3 in_uvdir, float in_maxdst, inout float in_hitdepth){
    //主要思想，求光线与当前测试深度的交点，如果交点在当前cell中，说明相交。如果不在，步进光线起始位置
    const int maxLevel = 8;
    vec2 crossStep = vec2(in_uvdir.x>=0?1:-1, in_uvdir.y>=0?1:-1);
    vec2 crossOffset = crossStep / vec2(1600.0, 900.0) / 128;
    crossStep = clamp(crossStep, 0.0, 1.0);

    vec3 ray = in_uvstart;
    float minZ = ray.z;
    float maxZ = ray.z+in_uvdir.z*in_maxdst;
    float deltaZ = (maxZ-minZ);

    vec3 o = ray;
    vec3 d = in_uvdir*in_maxdst;

    int startLevel = 2;
    int stopLevel = 0;
    vec2 startCellCount = getCellCount(startLevel);//横向，纵向单元个数
    vec2 rayCell = getCell(ray.xy, startCellCount);//当前光线位置位于哪个单元
    //光线末端位置
    ray = intersectCellBoundary(o, d, rayCell, startCellCount, crossStep, crossOffset*64);

    int level = startLevel;
    int iter = 0;
    bool isBackwardRay = in_uvdir.z<0;

    float Dir = isBackwardRay ? -1 : 1;

    while (level>=stopLevel && ray.z*Dir <= maxZ*Dir && iter<100){
        vec2 cellCount = getCellCount(level);
        vec2 oldCellIdx = getCell(ray.xy, cellCount);

        float cell_minZ = getMinimumDepthPlane(ray.xy, level);

        vec3 tmpRay = ((cell_minZ>ray.z) && !isBackwardRay) ? intersectDepthPlane(o, d, (cell_minZ-minZ)/deltaZ) :ray;

        vec2 newCellIdx = getCell(tmpRay.xy, cellCount);

        float thickness = level ==0 ? (ray.z-cell_minZ) : 0;
        //crossed,是不是越过了分界线。如果越过分界线，说明没有碰撞。
        bool crossed  = crossedCellBoundary(oldCellIdx, newCellIdx)||(isBackwardRay&&(cell_minZ>ray.z))||(thickness>MAX_THICKNESS);
        //如果越过分界线，光线起点步进到光线与分解的交界。如果没有越过分解线说明相交了。
        ray = crossed ? intersectCellBoundary(o, d, oldCellIdx, cellCount, crossStep, crossOffset):ray;
        level = crossed ? min(maxLevel, level+1):level-1;
        ++iter;
    }
    bool intersected = (level < stopLevel);
    vec3 hitPos = ray;
    in_hitdepth = ray.z;
    if (intersected){
        //添加物体厚度检测
        float hitdepth = getMinimumDepthPlane(hitPos.xy, 0);
        float hitcamz = depthToViewZ(hitdepth, ubobasedata.znear, ubobasedata.zfar);
        float raycamz = depthToViewZ(ray.z, ubobasedata.znear, ubobasedata.zfar);
        intersected = abs(hitcamz-raycamz)<1.0?true:false;
    }
    return intersected ? ivec2(hitPos.xy*vec2(ubobasedata.depthimagesize[0].xy)):ivec2(-1, -1);
}
void main()
{
    vec2 pixeluv = (vec2(gl_GlobalInvocationID.xy)+vec2(0.5))/vec2(uSrcDstImageSize.xy);
    vec4 normalrough = texture(normalTex, pixeluv);
    if (normalrough.w<0.5){
        float depth = texture(depthTex[0], pixeluv).r;
        vec3 orgin = depthToWorldPos(pixeluv, depth);
        vec3 V = normalize(ubobasedata.camerapos-orgin);
        vec3 wi;
        float pdf;
        float hitdepth;
        vec3 sampleuv;
        uint seedxy = tea(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
        uint seed = tea(seedxy, int(clockARB()));
        sampleuv.x =rnd(seed);
        sampleuv.y =rnd(seed);
        sampleuv.z =rnd(seed);
        sampleGTRBRDF2(sampleuv, V, normalrough.xyz, normalrough.w, wi, pdf);
        vec3 orgin_view = (ubobasedata.view*vec4(orgin, 1.0f)).xyz;
        vec3 wi_view = mat3(ubobasedata.view)*wi;

        vec3 uvstart = getScreenCoord(orgin_view);
        vec3 uvend = getScreenCoord(orgin_view+wi_view);
        vec3 uvdir = normalize(uvend-uvstart);
        //---
        float maxTraceX = uvdir.x>=0 ? (1-uvstart.x)/uvdir.x:-uvstart.x/uvdir.x;
        float maxTraceY = uvdir.y>=0 ? (1-uvstart.y)/uvdir.y:-uvstart.y/uvdir.y;
        float maxTraceZ = uvdir.z>=0 ? (1-uvstart.z)/uvdir.z:-uvstart.z/uvdir.z;
        float maxuvdistance = min(maxTraceX, min(maxTraceY, maxTraceZ));//uv总距离最大值

        ivec2 hitpixel = traceHitPixel(uvstart, uvdir, maxuvdistance, hitdepth);
        uint pdfint = floatBitsToInt(pdf);
        uint depthint = floatBitsToInt(hitdepth);
        imageStore(hitPixelImage, ivec2(gl_GlobalInvocationID.xy), ivec4(hitpixel, pdfint, depthint));

        vec3 refalbedo = vec3(0);
        if (hitpixel.x!=-1){
            refalbedo = texture(albedoTex, (vec2(hitpixel)+vec2(0.5))/vec2(ubobasedata.depthimagesize[0].xy)).rgb;
        }
        imageStore(debugImage, ivec2(gl_GlobalInvocationID.xy), vec4(refalbedo, 1));
    } else {
        imageStore(hitPixelImage, ivec2(gl_GlobalInvocationID.xy), ivec4(-1, -1, -1, -1));
        imageStore(debugImage, ivec2(gl_GlobalInvocationID.xy), vec4(0, -1, 0, 1));
    }
}
