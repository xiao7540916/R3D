#version 460
#define DIRECTION_LIGHT_COUNT 4
struct DirLight {
    vec3 direction;
    float fill0;
    vec3 strength;
    float fill1;
};
struct UniformBlockBase {
    mat4 view;
    mat4 proj;
    mat4 invproj;
    mat4 viewproj;
    mat4 invviewproj;
    vec3 camerapos;
    int dirlightactivenum;//平行光启用数目
    DirLight dirLights[DIRECTION_LIGHT_COUNT];
    int pointlightactivenum;//点光源启用数目
    int tilepointlightmax;//单个块最多点光源数目
    float windowwidth;
    float windowheight;
    int workgroup_x;//用于灯光剔除的横向组数
    float znear;
    float zfar;
    int csmlayercount;
    mat4 lightviewprojdata[6];
    float depthbias;
    float normalbias;
    float fill0;
    float fill1;
    vec3 ambient;
    float fill2;
    ivec4 depthimagesize[9];
    mat4 lastviewproj;
};
layout(std140, binding = 0) uniform UniformBaseBuffer {
    UniformBlockBase ubobasedata;
};

layout (binding = 0) uniform sampler2D normalTex;//normal,roughness rgba32f
layout (binding = 1) uniform sampler2D albedoTex;//albedo,metal rgba32f
layout (binding = 2) uniform sampler2D radianceTex;//亮度采样贴图
layout (binding = 3) uniform sampler2D depthTex;//亮度采样贴图
layout (binding = 4) uniform sampler2D sssrColLastTex;//上一帧sssr
layout (binding = 5) uniform sampler2D frameColLastTex;//上一帧颜色缓冲
layout (binding = 6) uniform sampler2D frameColNowTex;//当前帧颜色缓冲
layout (binding = 0, rgba32i) uniform readonly iimage2D hitPixelImage;
layout (binding = 1, rgba32f) uniform writeonly image2D sssrColImage;


layout(local_size_x = 16, local_size_y = 16) in;
/*in uvec3 gl_NumWorkGroups;
in uvec3 gl_WorkGroupID;
in uvec3 gl_LocalInvocationID;
in uvec3 gl_GlobalInvocationID;
in uint gl_LocalInvocationIndex;

gl_NumWorkGroups：此变量包含传递给调度功能的工作组数。
gl_WorkGroupID：这是此着色器调用的当前工作组。每个XYZ组件将处于半开范围[0，gl_NumWorkGroups.XYZ）
gl_LocalInvocationID：这是着色器的当前调用中的工作组。每个XYZ组件将处于半开范围[0，gl_WorkGroupSize.XYZ）
gl_GlobalInvocationID：此值在此计算调度调用的所有调用中唯一标识该计算着色器的特定调用
它跟前者有着等式关系：gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID;
gl_LocalInvocationIndex：这是gl_LocalInvocationID的一维版本。它在工作组中标识此调用的索引
它跟前者有着等式关系： gl_LocalInvocationIndex =
gl_LocalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y +
gl_LocalInvocationID.y * gl_WorkGroupSize.x +
gl_LocalInvocationID.x;*/
/*
//gl_GlobalInvocationID.xy 全局工作组的位置gl_WorkGroupID*gl_WorkGroupSize+gl_LocalInvocationID
//gl_LocalInvocationID.xy 本地工作组的序号(0,0,0)到(3,3,1);
//gl_WorkGroupID 当前工作组在全局工作组中的位置（0,0,0）到（299,224,0）
//gl_WorkGroupSize.xyz 工作组大小(4,4,1)
//gl_NumWorkGroups 工作组个数向量vec3(300,225,1);
*/
const float PI = 3.14159265358979323846;
const float PI2 = 6.283185307179586;
const float INVPI = 0.3183099;
vec3 depthToWorldPos(vec2 in_uv, float in_depth){
    vec3 worldpos;
    float ndcz = in_depth*2.0f-1.0f;
    vec2 ndcxy = in_uv*2.0f-vec2(1.0f);
    vec4 ndc = vec4(ndcxy, ndcz, 1.0f);
    vec4 D = ubobasedata.invviewproj*ndc;
    D/=D.w;
    worldpos = D.xyz;
    return worldpos;
}
vec2 pixelToUV(ivec2 pixel){
    return (vec2(pixel)+vec2(0.5))/vec2(ubobasedata.windowwidth, ubobasedata.windowheight);
}

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
    return nom / max(denom, 0.00001);
}
// ----------------------------------------------------------------------------
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}
// ----------------------------------------------------------------------------
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}
vec3 clipAABB(vec3 aabbMin, vec3 aabbMax, vec3 prevSample)
{
    //aabbMin,aabbMax当前帧像素周围颜色AABB prevSample，上一帧采样到的颜色
    //将上一帧采样到的颜色规制到当前帧周围像素的AABB内，避免动态场景时相差过大
    vec3 p_clip = 0.5 * (aabbMax + aabbMin);
    vec3 e_clip = 0.5 * (aabbMax - aabbMin);

    vec3 v_clip = prevSample - p_clip;
    vec3 v_unit = v_clip.xyz / e_clip;
    vec3 a_unit = abs(v_unit);
    float ma_unit = max(a_unit.x, max(a_unit.y, a_unit.z));

    if (ma_unit > 1.0){
        return p_clip + v_clip / ma_unit;
    } else {
        return prevSample;//当前帧颜色在上一帧颜色AABB内，返回上一帧采样到的颜色
    }
}
bool inNowAABB(vec3 aabbMin, vec3 aabbMax, vec3 prevSample){
    //aabbMin,aabbMax当前帧像素周围颜色AABB prevSample，上一帧采样到的颜色
    //将上一帧采样到的颜色规制到当前帧周围像素的AABB内，避免动态场景时相差过大
    vec3 p_clip = 0.5 * (aabbMax + aabbMin);
    vec3 e_clip = 0.5 * (aabbMax - aabbMin);

    vec3 v_clip = prevSample - p_clip;
    vec3 v_unit = v_clip.xyz / e_clip;
    vec3 a_unit = abs(v_unit);
    float ma_unit = max(a_unit.x, max(a_unit.y, a_unit.z));

    if (ma_unit > 1.0){
        return false;
    } else {
        return true;//当前帧颜色在上一帧颜色AABB内，返回上一帧采样到的颜色
    }
}
void main()
{
    bool shadered = false;
    vec2 pixeluv = pixelToUV(ivec2(gl_GlobalInvocationID.xy));
    vec4 normalrough = texture(normalTex, pixeluv);
    imageStore(sssrColImage, ivec2(gl_GlobalInvocationID.xy), vec4(0, 0, 0, 1));
    if (normalrough.w<0.5){
        vec3 Lo = vec3(0);
        vec4 albedometal = texture(albedoTex, pixeluv);
        float depth = texture(depthTex, pixeluv).r;
        vec3 camPos = ubobasedata.camerapos;
        vec3 worldPos = depthToWorldPos(pixeluv, depth);
        vec3 N = normalrough.xyz;
        vec3 V = normalize(camPos - worldPos);
        vec3 F0 = vec3(0.04);
        ivec2 localindex[5] = { ivec2(0, 0), ivec2(-1, 0), ivec2(1, 0), ivec2(0, -1), ivec2(0, 1) };
        float activesize = 0.0f;
        for (int i=0;i<5;i++){
            ivec2 testindex = ivec2(gl_GlobalInvocationID.xy)+localindex[i];
            if (testindex.x>-1&&testindex.x<(ubobasedata.windowwidth-1)&&testindex.y>-1&&testindex.y<(ubobasedata.windowheight-1)){
                ivec4 radianceinfo = imageLoad(hitPixelImage, testindex);
                F0 = mix(F0, albedometal.xyz, albedometal.w);
                if (radianceinfo.x!=-1){
                    activesize+=1.0f;
                    vec3 radiance = texture(radianceTex, pixelToUV(radianceinfo.xy)).rgb;
                    float pdf = intBitsToFloat(radianceinfo.z);
                    float hitdepth = intBitsToFloat(radianceinfo.w);
                    vec3 hitpos = depthToWorldPos(pixelToUV(radianceinfo.xy), hitdepth);

                    // calculate per-light radiance
                    vec3 L = normalize(hitpos - worldPos);
                    vec3 H = normalize(V + L);

                    vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);

                    Lo += max(vec3(0), (F*radiance));
                }
            }
        }
        shadered = true;
        if (activesize>0.5){
            vec2 uvsize = vec2(1.0f)/vec2(ubobasedata.windowwidth,ubobasedata.windowheight);
            //检查当前像素是否是动态场景
            vec3 col00 = texture(frameColNowTex, pixeluv).rgb;
            vec3 col01 = texture(frameColNowTex, pixeluv+vec2(-uvsize.x,0)).rgb;
            vec3 col02 = texture(frameColNowTex, pixeluv+vec2(uvsize.x,0)).rgb;
            vec3 col03 = texture(frameColNowTex, pixeluv+vec2(0,-uvsize.y)).rgb;
            vec3 col04 = texture(frameColNowTex, pixeluv+vec2(0,uvsize.y)).rgb;
            vec3 colmin,colmax;
            colmin = min(min(col00,min(col01,col02)),min(col03,col04));
            colmax = max(max(col00,max(col01,col02)),max(col03,col04));
            vec3 colpre = texture(frameColLastTex, pixeluv).rgb;
            bool inaabb = inNowAABB(colmin, colmax, colpre);

            if(inaabb){
                vec2 lastuv;
                vec4 projpos = ubobasedata.lastviewproj*vec4(worldPos, 1.0f);
                projpos/=projpos.w;
                lastuv = projpos.xy*0.5f+vec2(0.5f);
                vec3 lastLo = vec3(0);
                lastLo = texture(sssrColLastTex, lastuv).rgb;

                vec3 compLo = Lo/activesize;
                vec3 finalLo;
                vec3 blendval;
                blendval.x = 0.1*pow(compLo.x, 0.2)+0.9*pow(lastLo.x, 0.2);
                blendval.y = 0.1*pow(compLo.y, 0.2)+0.9*pow(lastLo.y, 0.2);
                blendval.z = 0.1*pow(compLo.z, 0.2)+0.9*pow(lastLo.z, 0.2);
                finalLo.x = pow(blendval.x, 5.0);
                finalLo.y = pow(blendval.y, 5.0);
                finalLo.z = pow(blendval.z, 5.0);

                imageStore(sssrColImage, ivec2(gl_GlobalInvocationID.xy), vec4(finalLo, 1));
            }
            else{
                imageStore(sssrColImage, ivec2(gl_GlobalInvocationID.xy), vec4(Lo/activesize, 1));
            }
        } else {
            imageStore(sssrColImage, ivec2(gl_GlobalInvocationID.xy), vec4(0, 0, 0, 1));
        }
    }
    if (!shadered){
        imageStore(sssrColImage, ivec2(gl_GlobalInvocationID.xy), vec4(0, 0, 0, 1));
    }
}
