#version 460
uniform int blurMode;
layout (binding = 0) uniform sampler2D srcTex;
layout (binding = 1,r16f) uniform image2D dstImage;

layout(local_size_x = 16, local_size_y = 16) in;
/*in uvec3 gl_NumWorkGroups;
in uvec3 gl_WorkGroupID;
in uvec3 gl_LocalInvocationID;
in uvec3 gl_GlobalInvocationID;
in uint gl_LocalInvocationIndex;

gl_NumWorkGroups：此变量包含传递给调度功能的工作组数。
gl_WorkGroupID：这是此着色器调用的当前工作组。每个XYZ组件将处于半开范围[0，gl_NumWorkGroups.XYZ）
gl_LocalInvocationID：这是着色器的当前调用中的工作组。每个XYZ组件将处于半开范围[0，gl_WorkGroupSize.XYZ）
gl_GlobalInvocationID：此值在此计算调度调用的所有调用中唯一标识该计算着色器的特定调用
它跟前者有着等式关系：gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID;
gl_LocalInvocationIndex：这是gl_LocalInvocationID的一维版本。它在工作组中标识此调用的索引
它跟前者有着等式关系： gl_LocalInvocationIndex =
gl_LocalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y +
gl_LocalInvocationID.y * gl_WorkGroupSize.x +
gl_LocalInvocationID.x;*/
/*
//gl_GlobalInvocationID.xy 全局工作组的位置gl_WorkGroupID*gl_WorkGroupSize+gl_LocalInvocationID
//gl_LocalInvocationID.xy 本地工作组的序号(0,0,0)到(3,3,1);
//gl_WorkGroupID 当前工作组在全局工作组中的位置（0,0,0）到（299,224,0）
//gl_WorkGroupSize.xyz 工作组大小(4,4,1)
//gl_NumWorkGroups 工作组个数向量vec3(300,225,1);
*/


uniform float weight[6] = float[] (0.2270270270, 0.1945945946, 0.1575945946, 0.1216216216, 0.0540540541, 0.0162162162);

vec3 HorizontalBlur(const sampler2D texBuffer, const vec2 tex_size, const vec3 vec,const vec2 texUV)
{
    vec3 result = vec;
    for(int i = 1; i < 6; ++i)
    {
        result += texture(texBuffer, texUV + vec2(tex_size.x * i, 0.0)).rgb * weight[i];
        result += texture(texBuffer, texUV - vec2(tex_size.x * i, 0.0)).rgb * weight[i];
    }

    return result;
}

vec3 VerticalBlur(const sampler2D texBuffer, const vec2 tex_size, const vec3 vec,const vec2 texUV)
{
    vec3 result = vec;
    for(int i = 1; i < 6; ++i)
    {
        result += texture(texBuffer, texUV + vec2(0.0, tex_size.y * i)).rgb * weight[i];
        result += texture(texBuffer, texUV - vec2(0.0, tex_size.y * i)).rgb * weight[i];
    }

    return result;
}

void main()
{
    vec2 texUV = vec2(gl_GlobalInvocationID.xy)/vec2(1600,900);
    vec2 tex_size = 1.0 / textureSize(srcTex, 0); // gets size of single texel
    vec3 blurResult = texture(srcTex, texUV).rgb * weight[0];

    switch (blurMode)
    {
        case 0:
        blurResult = HorizontalBlur(srcTex, tex_size, blurResult,texUV);
        break;
        case 1:
        blurResult = VerticalBlur(srcTex, tex_size, blurResult,texUV);
        break;
    }
    imageStore(dstImage, ivec2(gl_GlobalInvocationID.xy), vec4(blurResult, 1.0f));
}
